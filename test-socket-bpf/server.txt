     1	#include <unistd.h>
     2	#include <stdio.h>
     3	#include <string.h>
     4	#include <sys/socket.h>
     5	#include <linux/filter.h>
     6	#include <sys/types.h>
     7	#include <arpa/inet.h>
     8	#include <linux/if_ether.h>
     9	#include <stdlib.h>
    10	
    11	
    12	struct sock_filter code[] = {
    13		{ 0x28,  0,  0, 0x00000000 },
    14		{ 0x15,  1,  0, 0x000022b0 },
    15		{ 0x06,  0,  0, 0x00000000 },
    16		{ 0x06,  0,  0, 0xffffffff },
    17	};
    18	
    19	
    20	struct sock_fprog bpf;
    21	
    22	
    23	int main(int argc, char *argv[])
    24	{
    25		struct sockaddr_in server_addr;
    26		server_addr.sin_family = AF_INET;
    27		server_addr.sin_addr.s_addr = htons(INADDR_ANY);
    28		server_addr.sin_port = htons(12345);
    29	
    30		bpf.len = sizeof(code) / sizeof(code[0]);
    31		bpf.filter = code;
    32	
    33		/* Create a server TCP socket */
    34		int server_socket = socket(PF_INET, SOCK_STREAM, 0);
    35		if(server_socket < 0)
    36		{
    37			perror("socket");
    38			exit(1);
    39		}
    40	
    41		/* Attach cBPF program to server_socket */
    42		if(setsockopt(server_socket, SOL_SOCKET, SO_ATTACH_FILTER, &bpf, sizeof(bpf)) < 0)
    43		{
    44			perror("setsockopt");
    45			exit(1);
    46		}
    47	
    48		/* Bind server_socket with local port */
    49		if(bind(server_socket, (struct sockaddr*)(&server_addr), sizeof(server_addr)) < 0)
    50		{
    51			perror("bind");
    52			exit(1);
    53		}
    54	
    55		/* Listen to the requests from clients */
    56		if(listen(server_socket, 50) < 0)
    57		{
    58			perror("listen");
    59			exit(1);
    60		}
    61	
    62		/* Accept the arrived request from the client */
    63		struct sockaddr_in client_addr;
    64		socklen_t length = sizeof(client_addr);
    65		int client_socket = accept(server_socket, (struct sockaddr*)(&client_addr), &length);
    66		if(client_socket < 0)
    67		{
    68			perror("accept");
    69			exit(1);
    70		}
    71	
    72		/* Send and receive messages */
    73		char sendstr[] = "I am server.";
    74		char recvstr[1024];
    75		bzero(recvstr, 1024);
    76		if(recv(client_socket, recvstr, 1024, 0) < 0)
    77		{
    78			perror("recv");
    79			exit(1);
    80		}
    81	
    82		printf("%s\n", recvstr);
    83	
    84		if(send(client_socket, sendstr, strlen(sendstr)+1, 0) < 0)
    85		{
    86			perror("send");
    87			exit(1);
    88		}
    89	
    90		close(client_socket);
    91		close(server_socket);
    92	
    93		return 0;
    94	}
    95	
    96	
